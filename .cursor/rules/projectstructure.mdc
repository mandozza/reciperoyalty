---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
emoji: 📋
title: Project Structure and Dependencies
---

# Cursor Rule: Project Structure and Dependencies

## Description  
Ensure consistent handling of dependencies and file structure in the Next.js project. These rules enforce checking existing dependencies before suggesting installations and maintaining proper file organization.

## Rules

---

### 📦 1. Dependency Management
- **Rule**: Always check package.json before suggesting new dependencies
- **Best Practices**:
  - Check both `dependencies` and `devDependencies` sections
  - Note version requirements and compatibility
  - Consider existing similar packages that might serve the same purpose
- **Applies To**: `dependencies`, `installation`, `packages`
- **Priority**: Critical

---

### 📁 2. Source Directory Structure
- **Rule**: All new code must follow the established src/ directory structure
- **Best Practices**:
  - Place components in `src/components/`
  - Place pages in `src/app/` (Next.js App Router)
  - Place types in `src/types/`
  - Place hooks in `src/hooks/`
  - Place utilities in `src/lib/`
  - Place contexts in `src/contexts/`
  - Place models in `src/models/`
- **Applies To**: `structure`, `organization`, `files`
- **Priority**: Critical

---

### 🔍 3. Import Path Resolution
- **Rule**: Use `@/` alias for imports from the src directory
- **Best Practices**:
  - Use `@/components/` instead of `../../components`
  - Use `@/lib/` instead of relative paths
  - Maintain consistent import style across files
- **Applies To**: `imports`, `paths`, `organization`
- **Priority**: High

---

### 🧪 4. Feature Implementation
- **Rule**: Check existing implementation before suggesting new solutions
- **Best Practices**:
  - Search codebase for similar implementations
  - Review existing utilities and hooks
  - Consider extending existing solutions before creating new ones
- **Applies To**: `features`, `code reuse`, `DRY`
- **Priority**: High